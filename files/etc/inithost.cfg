###
### Configuration settings
###

# maps entries to IPv4 0.0.0.0 (default)
ENDPOINT_IP4="0.0.0.0"
# ENDPOINT_IP4=$(uci get network.lan.ipaddr)
# can be used if you want to use a local web server to suppress connection error requests

# directory where the compressed host files are being stored persistently
PERSISTENTDIR="/usr/share/inithost/hostfiles"

# directory where dnsmasq expects the active uncompressed host files
ACTIVEHOSTDIR="/tmp/hosts"
# if you change this default you will need to add a 'addnhost' config entry in /etc/dnsmasq.conf

# Use rule files in this directory to rewrite /etc/dnsmasq.conf to apply certain DNS rules
# for hosts which satisfy wildcard expressions
RULESDIR="/usr/share/inithost/dnsmasq_rules"

# Define whitelists
HOSTWHITELIST="$PERSISTENTDIR/whitelist"
RULEWHITELIST="$RULESDIR/whitelist"


###
### Functions -- if other host files are used from the web these need to get extended
###

# for a better understanding read also /etc/init.d/inithost

### update_active_host_file
# updates an active host file from the web and prepares it for use with dnsmasq
# $1 -- name of the active host file
# $2 -- URL from where to fetch the updated host file
# $3 -- optional storage location where the active host file is stored and then soft-linked to $ACTIVEHOSTDIR
#       if this parameter is omitted the file is stored in $ACTIVEHOSTDIR (default)

update_active_host_file() {

        # declare the URL where to fetch the host file
        hname="$1"
        url="$2"
        hf="$PERSISTENTDIR/$hname"
        sloc="$3"
        hfl=$(readlink $hf)

        if [ "$sloc" != "" ]; then
                # we want to use an optional storage location let us check if the link is correct
                # if not let's delete it (and the target)
                if [ "$hfl" != "$sloc/$hname" ]; then
                        echo "Deleting $hfl and recreating $hf as symlink to $sloc/$hname"
			rm -f $hfl
                        rm -f $hf
                fi
        else
                # is still an optional storage location being used? 
                # If yes let's delete it (and the target)
                if [ "$hfl" != "" ]; then
			rm -f $hfl
                        rm -f $hf
                fi
        fi

        # by default we'd avoid frequent updates
        local needs_updating="0"

        # does an active host file exist?
        if [ -f $hf ]; then
                # Yes! then compare time stamps of persistent host file and web host file
                echo -n "check for update..."
                remote_mtime=$(last_mtime $url)
                local_mtime=$(date +%s -r $hf)

                # if host file is newer perform an update
                if [ "$remote_mtime" -gt "$local_mtime" ]; then
                        needs_updating="1"
                else
                        echo "already up-to-date"
                fi
        else
                # No! we recreate it in any case!
                needs_updating="1"
                # in case we use an optional storage location create a soft link
                if [ "$sloc" != "" ]; then
                        mkdir -p "$sloc/"
                        ln -sf "$sloc/$hname" $hf
                fi
        fi

        if [[ "$needs_updating" -eq "1" ]]; then
                echo "updating"
                # TODO add whitelist filtering...
                curl -s $url | hostfilter "$hname" |\
                sed 's/^0.0.0.0 //' | sort -u |\
                awk '
                  BEGIN{
                    while (readline<"'$HOSTWHITELIST'"){wl[$1]=1}
                  }
                  NF==1{
                    if (!($1~wl))
                      print '$ENDPOINT_IPV4',$0;
                  }' > $hf
        fi
}

function hostfilter() {
        case $1 in
        "mvps")    grep 0.0.0.0 | sed 's/[[:space:]]*#.*$//g' | grep -v localhost | tr -d '\r' | tr -s '\t' | tr -d '\015' ;;
        "adaway")  grep -v "#" | grep -v "::1" | sed '/^$/d' | sed 's/\ /\\ /g' | awk '{print $2}' | grep -v '^\\' | grep -v '\\$' ;;
        "hfnet")   grep -v "#" | grep -v "::1" | sed '/^$/d' | sed 's/\ /\\ /g' | awk '{print $2}' | grep -v '^\\' | grep -v '\\$' ;;
        "mwd")     grep -v "#" | sed '/^$/d' | sed 's/\ /\\ /g' | awk '{print $3}' | grep -v '^\\' | grep -v '\\$' ;;
        "sowc")    grep -v "#" | sed '/^$/d' | sed 's/\ /\\ /g' | grep -v '^\\' | grep -v '\\$' | awk '{print $2}' | grep -v '^\\' | grep -v '\\$' ;;
        "gjtech")  grep -v "#" | sed '/^$/d' | sed 's/\ /\\ /g' | awk '{print $2}' | grep -v '^\\' | grep -v '\\$' ;;
        "yoyo")    grep -v "#" | grep -v '^<' | grep -v '^ ' | grep -v '^$(printf '\t')' ;;
        *)         awk '{print "filter undefined"; exit(1)}' ;;
}

### MAIN FUNCTION

# for any new host file add a new entry here!
update_host_files_from_web() {
        update_active_host_file "mvps"   "http://winhelp2002.mvps.org/hosts.txt" 
        update_active_host_file "adaway" "http://adaway.org/hosts.txt"         
        update_active_host_file "hfnet"  "http://hosts-file.net/.%5Cad_servers.txt"
#        update_active_host_file "mwd" "http://www.malwaredomainlist.com/hostslist/hosts.txt"
#        update_active_host_file "sowc" "http://someonewhocares.org/hosts/hosts"

#        ... yoyo gjtech ...

# static host files (no web updates available):
# $PERSISTENTDIR/custom
# $PERSISTENTDIR/porn
}
